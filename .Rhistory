W <- sample(1:4, n, replace=TRUE, prob=c(0.1, 0.2, 0.65, 0.05))
A <- rbinom(n, 1, expit(1.4 - 0.6 * W))
Y <- rnorm(n, 2 + .5 * W, 1)
# estimation of truth
est = mean((A == 0) * Y)/mean(A == 0)
# data
data <- data.table(W=factor(W), A=factor(A), Y)
node_list <- list(W = "W", A = "A", Y = "Y")
tmle_spec <- tmle_TR(1, 0)
tmle_task <- tmle_spec$make_tmle_task(data, node_list)
lrnr_glm <- make_learner(Lrnr_glm)
learner_list <- list(Y = lrnr_glm, A = lrnr_glm)
factor_list <- list(
define_lf(LF_emp, "W"),
define_lf(LF_fit, "A", learner = learner_list[["A"]]),
define_lf(LF_fit_site, "Y", learner = learner_list[["Y"]], type = "mean")
)
initial_likelihood <- Likelihood$new(factor_list)$train(tmle_task)
### 1. non-parametric estimator ###
psi_0 = function(b) mean(W == b & A == 0)
psi_1 = function(b) mean(W == b & A == 1)
psi_2 = function(b) mean((W == b & A == 1) * Y)
psi_s = mean(A == 0)
f_n = sum(sapply(levels(factor(W)),
function(b) psi_0(b)/psi_s * psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)))
D_n = rowSums(sapply(levels(factor(W)),
function(b) (psi_0(b) * (W == b & A == 1))/(psi_s * ifelse(psi_1(b), psi_1(b), 1)) * (Y - psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)) +
(W == b & A == 0)/psi_s * (psi_2(b)/ifelse(psi_1(b), psi_1(b), 1) - f_n)))
sd = sd(D_n) / sqrt(n)
### 2. TMLE ###
# define update method (submodel + loss function)
# disable cvtmle for this test to compare with tmle package
updater <- tmle3_Update$new(cvtmle = FALSE, convergence_type = "sample_size")
targeted_likelihood <- Targeted_Likelihood$new(initial_likelihood, updater)
# define parameter
tmle_param <- tmle_spec$make_params(tmle_task, targeted_likelihood)
# fit
tmle_fit <- fit_tmle3(tmle_task, targeted_likelihood, tmle_param, updater)
# extract results
tmle_summary <- tmle_fit$summary
tmle_psi <- tmle_summary$tmle_est
tmle_se <- tmle_summary$se
tmle_epsilon <- updater$epsilons[[1]]$Y
### tests ###
tol <- 1 / sqrt(n)
test_that("psi results match", {
expect_equal(tmle_psi, f_n, tol = tol)
})
test_that("se results match", {
expect_equal(tmle_se, sd, tol = tol)
})
est >= tmle_summary$lower && est <= tmle_summary$upper
context("Test - Simulation")
library(sl3)
library(tmle3)
library(tmle3tr)
library(uuid)
library(assertthat)
library(data.table)
library(future)
# note: S <=> A, site variable
# generate data
'
W <- c(2,2,3,4,2,3,5,6,7,8)
A <- c(1,1,1,1,0,0,0,0,0,0)
Y <- c(3,9,8,1,2,4,5,6,7,0)
'
#set.seed(1234)
n <- 1000
W <- sample(1:4, n, replace=TRUE, prob=c(0.1, 0.2, 0.65, 0.05))
A <- rbinom(n, 1, expit(1.4 - 0.6 * W))
Y <- rnorm(n, 2 + .5 * W, 1)
# estimation of truth
est = mean((A == 0) * Y)/mean(A == 0)
# data
data <- data.table(W=factor(W), A=factor(A), Y)
node_list <- list(W = "W", A = "A", Y = "Y")
tmle_spec <- tmle_TR(1, 0)
tmle_task <- tmle_spec$make_tmle_task(data, node_list)
lrnr_glm <- make_learner(Lrnr_glm)
learner_list <- list(Y = lrnr_glm, A = lrnr_glm)
factor_list <- list(
define_lf(LF_emp, "W"),
define_lf(LF_fit, "A", learner = learner_list[["A"]]),
define_lf(LF_fit_site, "Y", learner = learner_list[["Y"]], type = "mean")
)
initial_likelihood <- Likelihood$new(factor_list)$train(tmle_task)
### 1. non-parametric estimator ###
psi_0 = function(b) mean(W == b & A == 0)
psi_1 = function(b) mean(W == b & A == 1)
psi_2 = function(b) mean((W == b & A == 1) * Y)
psi_s = mean(A == 0)
f_n = sum(sapply(levels(factor(W)),
function(b) psi_0(b)/psi_s * psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)))
D_n = rowSums(sapply(levels(factor(W)),
function(b) (psi_0(b) * (W == b & A == 1))/(psi_s * ifelse(psi_1(b), psi_1(b), 1)) * (Y - psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)) +
(W == b & A == 0)/psi_s * (psi_2(b)/ifelse(psi_1(b), psi_1(b), 1) - f_n)))
sd = sd(D_n) / sqrt(n)
### 2. TMLE ###
# define update method (submodel + loss function)
# disable cvtmle for this test to compare with tmle package
updater <- tmle3_Update$new(cvtmle = FALSE, convergence_type = "sample_size")
targeted_likelihood <- Targeted_Likelihood$new(initial_likelihood, updater)
# define parameter
tmle_param <- tmle_spec$make_params(tmle_task, targeted_likelihood)
# fit
tmle_fit <- fit_tmle3(tmle_task, targeted_likelihood, tmle_param, updater)
# extract results
tmle_summary <- tmle_fit$summary
tmle_psi <- tmle_summary$tmle_est
tmle_se <- tmle_summary$se
tmle_epsilon <- updater$epsilons[[1]]$Y
### tests ###
tol <- 1 / sqrt(n)
test_that("psi results match", {
expect_equal(tmle_psi, f_n, tol = tol)
})
test_that("se results match", {
expect_equal(tmle_se, sd, tol = tol)
})
est >= tmle_summary$lower && est <= tmle_summary$upper
context("Test - Simulation")
library(sl3)
library(tmle3)
library(tmle3tr)
library(uuid)
library(assertthat)
library(data.table)
library(future)
# note: S <=> A, site variable
# generate data
'
W <- c(2,2,3,4,2,3,5,6,7,8)
A <- c(1,1,1,1,0,0,0,0,0,0)
Y <- c(3,9,8,1,2,4,5,6,7,0)
'
#set.seed(1234)
n <- 1000
W <- sample(1:4, n, replace=TRUE, prob=c(0.1, 0.2, 0.65, 0.05))
A <- rbinom(n, 1, expit(1.4 - 0.6 * W))
Y <- rnorm(n, 2 + .5 * W, 1)
# estimation of truth
est = mean((A == 0) * Y)/mean(A == 0)
# data
data <- data.table(W=factor(W), A=factor(A), Y)
node_list <- list(W = "W", A = "A", Y = "Y")
tmle_spec <- tmle_TR(1, 0)
tmle_task <- tmle_spec$make_tmle_task(data, node_list)
lrnr_glm <- make_learner(Lrnr_glm)
learner_list <- list(Y = lrnr_glm, A = lrnr_glm)
factor_list <- list(
define_lf(LF_emp, "W"),
define_lf(LF_fit, "A", learner = learner_list[["A"]]),
define_lf(LF_fit_site, "Y", learner = learner_list[["Y"]], type = "mean")
)
initial_likelihood <- Likelihood$new(factor_list)$train(tmle_task)
### 1. non-parametric estimator ###
psi_0 = function(b) mean(W == b & A == 0)
psi_1 = function(b) mean(W == b & A == 1)
psi_2 = function(b) mean((W == b & A == 1) * Y)
psi_s = mean(A == 0)
f_n = sum(sapply(levels(factor(W)),
function(b) psi_0(b)/psi_s * psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)))
D_n = rowSums(sapply(levels(factor(W)),
function(b) (psi_0(b) * (W == b & A == 1))/(psi_s * ifelse(psi_1(b), psi_1(b), 1)) * (Y - psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)) +
(W == b & A == 0)/psi_s * (psi_2(b)/ifelse(psi_1(b), psi_1(b), 1) - f_n)))
sd = sd(D_n) / sqrt(n)
### 2. TMLE ###
# define update method (submodel + loss function)
# disable cvtmle for this test to compare with tmle package
updater <- tmle3_Update$new(cvtmle = FALSE, convergence_type = "sample_size")
targeted_likelihood <- Targeted_Likelihood$new(initial_likelihood, updater)
# define parameter
tmle_param <- tmle_spec$make_params(tmle_task, targeted_likelihood)
# fit
tmle_fit <- fit_tmle3(tmle_task, targeted_likelihood, tmle_param, updater)
# extract results
tmle_summary <- tmle_fit$summary
tmle_psi <- tmle_summary$tmle_est
tmle_se <- tmle_summary$se
tmle_epsilon <- updater$epsilons[[1]]$Y
### tests ###
tol <- 1 / sqrt(n)
test_that("psi results match", {
expect_equal(tmle_psi, f_n, tol = tol)
})
test_that("se results match", {
expect_equal(tmle_se, sd, tol = tol)
})
est >= tmle_summary$lower && est <= tmle_summary$upper
context("Test - Simulation")
library(sl3)
library(tmle3)
library(tmle3tr)
library(uuid)
library(assertthat)
library(data.table)
library(future)
# note: S <=> A, site variable
# generate data
'
W <- c(2,2,3,4,2,3,5,6,7,8)
A <- c(1,1,1,1,0,0,0,0,0,0)
Y <- c(3,9,8,1,2,4,5,6,7,0)
'
#set.seed(1234)
n <- 1000
W <- sample(1:4, n, replace=TRUE, prob=c(0.1, 0.2, 0.65, 0.05))
A <- rbinom(n, 1, expit(1.4 - 0.6 * W))
Y <- rnorm(n, 2 + .5 * W, 1)
# estimation of truth
est = mean((A == 0) * Y)/mean(A == 0)
# data
data <- data.table(W=factor(W), A=factor(A), Y)
node_list <- list(W = "W", A = "A", Y = "Y")
tmle_spec <- tmle_TR(1, 0)
tmle_task <- tmle_spec$make_tmle_task(data, node_list)
lrnr_glm <- make_learner(Lrnr_glm)
learner_list <- list(Y = lrnr_glm, A = lrnr_glm)
factor_list <- list(
define_lf(LF_emp, "W"),
define_lf(LF_fit, "A", learner = learner_list[["A"]]),
define_lf(LF_fit_site, "Y", learner = learner_list[["Y"]], type = "mean")
)
initial_likelihood <- Likelihood$new(factor_list)$train(tmle_task)
### 1. non-parametric estimator ###
psi_0 = function(b) mean(W == b & A == 0)
psi_1 = function(b) mean(W == b & A == 1)
psi_2 = function(b) mean((W == b & A == 1) * Y)
psi_s = mean(A == 0)
f_n = sum(sapply(levels(factor(W)),
function(b) psi_0(b)/psi_s * psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)))
D_n = rowSums(sapply(levels(factor(W)),
function(b) (psi_0(b) * (W == b & A == 1))/(psi_s * ifelse(psi_1(b), psi_1(b), 1)) * (Y - psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)) +
(W == b & A == 0)/psi_s * (psi_2(b)/ifelse(psi_1(b), psi_1(b), 1) - f_n)))
sd = sd(D_n) / sqrt(n)
### 2. TMLE ###
# define update method (submodel + loss function)
# disable cvtmle for this test to compare with tmle package
updater <- tmle3_Update$new(cvtmle = FALSE, convergence_type = "sample_size")
targeted_likelihood <- Targeted_Likelihood$new(initial_likelihood, updater)
# define parameter
tmle_param <- tmle_spec$make_params(tmle_task, targeted_likelihood)
# fit
tmle_fit <- fit_tmle3(tmle_task, targeted_likelihood, tmle_param, updater)
# extract results
tmle_summary <- tmle_fit$summary
tmle_psi <- tmle_summary$tmle_est
tmle_se <- tmle_summary$se
tmle_epsilon <- updater$epsilons[[1]]$Y
### tests ###
tol <- 1 / sqrt(n)
test_that("psi results match", {
expect_equal(tmle_psi, f_n, tol = tol)
})
test_that("se results match", {
expect_equal(tmle_se, sd, tol = tol)
})
est >= tmle_summary$lower && est <= tmle_summary$upper
context("Test - Simulation")
library(sl3)
library(tmle3)
library(tmle3tr)
library(uuid)
library(assertthat)
library(data.table)
library(future)
# note: S <=> A, site variable
# generate data
'
W <- c(2,2,3,4,2,3,5,6,7,8)
A <- c(1,1,1,1,0,0,0,0,0,0)
Y <- c(3,9,8,1,2,4,5,6,7,0)
'
#set.seed(1234)
n <- 1000
W <- sample(1:4, n, replace=TRUE, prob=c(0.1, 0.2, 0.65, 0.05))
A <- rbinom(n, 1, expit(1.4 - 0.6 * W))
Y <- rnorm(n, 2 + .5 * W, 1)
# estimation of truth
est = mean((A == 0) * Y)/mean(A == 0)
# data
data <- data.table(W=factor(W), A=factor(A), Y)
node_list <- list(W = "W", A = "A", Y = "Y")
tmle_spec <- tmle_TR(1, 0)
tmle_task <- tmle_spec$make_tmle_task(data, node_list)
lrnr_glm <- make_learner(Lrnr_glm)
learner_list <- list(Y = lrnr_glm, A = lrnr_glm)
factor_list <- list(
define_lf(LF_emp, "W"),
define_lf(LF_fit, "A", learner = learner_list[["A"]]),
define_lf(LF_fit_site, "Y", learner = learner_list[["Y"]], type = "mean")
)
initial_likelihood <- Likelihood$new(factor_list)$train(tmle_task)
### 1. non-parametric estimator ###
psi_0 = function(b) mean(W == b & A == 0)
psi_1 = function(b) mean(W == b & A == 1)
psi_2 = function(b) mean((W == b & A == 1) * Y)
psi_s = mean(A == 0)
f_n = sum(sapply(levels(factor(W)),
function(b) psi_0(b)/psi_s * psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)))
D_n = rowSums(sapply(levels(factor(W)),
function(b) (psi_0(b) * (W == b & A == 1))/(psi_s * ifelse(psi_1(b), psi_1(b), 1)) * (Y - psi_2(b)/ifelse(psi_1(b), psi_1(b), 1)) +
(W == b & A == 0)/psi_s * (psi_2(b)/ifelse(psi_1(b), psi_1(b), 1) - f_n)))
sd = sd(D_n) / sqrt(n)
### 2. TMLE ###
# define update method (submodel + loss function)
# disable cvtmle for this test to compare with tmle package
updater <- tmle3_Update$new(cvtmle = FALSE, convergence_type = "sample_size")
targeted_likelihood <- Targeted_Likelihood$new(initial_likelihood, updater)
# define parameter
tmle_param <- tmle_spec$make_params(tmle_task, targeted_likelihood)
# fit
tmle_fit <- fit_tmle3(tmle_task, targeted_likelihood, tmle_param, updater)
# extract results
tmle_summary <- tmle_fit$summary
tmle_psi <- tmle_summary$tmle_est
tmle_se <- tmle_summary$se
tmle_epsilon <- updater$epsilons[[1]]$Y
### tests ###
tol <- 1 / sqrt(n)
test_that("psi results match", {
expect_equal(tmle_psi, f_n, tol = tol)
})
test_that("se results match", {
expect_equal(tmle_se, sd, tol = tol)
})
est >= tmle_summary$lower && est <= tmle_summary$upper
data
data$W
install.packages("MASS")
install.packages("MASS")
# setup data for test
washb_data <- fread("https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv", stringsAsFactors = TRUE)
data(cpp)
library(sl3)
library(tmle3)
library(tmle3tr)
library(uuid)
library(assertthat)
library(data.table)
library(future)
# setup data for test
data(cpp)
data <- as.data.table(cpp)
data
washb_data <- fread("https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv", stringsAsFactors = TRUE)
washb_data
Y$tr
data$tr
library(sl3)
library(tmle3)
library(tmle3tr)
library(uuid)
library(assertthat)
library(data.table)
library(future)
# note: S <=> A, site variable
# setup data for test
washb_data <- fread("https://raw.githubusercontent.com/tlverse/tlverse-data/master/wash-benefits/washb_data.csv", stringsAsFactors = TRUE)
node_list <- list(
W = c(
"month", "aged", "sex", "momage", "momedu",
"momheight", "hfiacat", "Nlt18", "Ncomp", "watmin",
"elec", "floor", "walls", "roof", "asset_wardrobe",
"asset_table", "asset_chair", "asset_khat",
"asset_chouki", "asset_tv", "asset_refrig",
"asset_bike", "asset_moto", "asset_sewmach",
"asset_mobile"
),
A = "tr",
Y = "whz"
)
processed <- process_missing(washb_data, node_list)
data <- processed$data
node_list <- processed$node_list
data
data$tr
data
W = c(
"month", "aged", "sex", "momage", "momedu",
"momheight", "hfiacat", "Nlt18", "Ncomp", "watmin",
"elec", "floor", "walls", "roof", "asset_wardrobe",
"asset_table", "asset_chair", "asset_khat",
"asset_chouki", "asset_tv", "asset_refrig",
"asset_bike", "asset_moto", "asset_sewmach",
"asset_mobile"
)
Y = "whz"
W
data[ ,colnames(data) %in% W, with=FALSE]
node_list$W
### 1. naive ###
W <- data[ ,colnames(data) %in% node_list$W, with=FALSE]
Y <- data[ ,colnames(data) %in% node_list$Y, with=FALSE]
glm(Y~W)
glm.fit
?glm.fit
glm.fit(W,Y)
W
Y
glm.fit(W,Y)
W <- data[ ,colnames(data) %in% c("month","momheight"), with=FALSE]
glm.fit(W,Y)
W
Y
is.na(Y)
sum(is.na(Y))
sum(is.na(W))
### 1. naive ###
W <- data[ ,colnames(data) %in% node_list$W, with=FALSE]
glm.fit(Y~W)
W
Y
glm.fit(Y~W)
Y[c(1,2),]
b = Y[c(1,2),]
a = W[c(1,2),]
W
a
v
b
glm.fit(b~a)
glm(b~a)
Y[[1]]
glm(Y[[1]]~W)
as.matrix(W)
washb_data
### 1. naive ###
ndlist = c("momheight", "aged", "momage", "Nlt18", "Ncomp", "watmin",
"elec", "floor", "walls", "roof", "asset_wardrobe",
"asset_table", "asset_chair", "asset_khat",
"asset_chouki", "asset_tv", "asset_refrig",
"asset_bike", "asset_moto", "asset_sewmach",
"asset_mobile")
W <- data[ ,colnames(data) %in% ndlist, with=FALSE]
Y <- data[ ,colnames(data) %in% node_list$Y, with=FALSE]
W
as.matrix(W)
as.matrix(Y)
glm.fit(as.matrix(W),as.matrix(Y))
fit <- glm.fit(as.matrix(W),as.matrix(Y))
summary(fit)
glm(as.matrix(Y)~as.matrix(W))
fit <- glm(as.matrix(Y)~as.matrix(W))
summary(fit)
W <- data[ ,colnames(data) %in% c("asset_tv", "asset_refrig", "asset_table", "asset_sewmach",
"asset_mobile", "momheight", "momage"), with=FALSE]
Y <- data[ ,colnames(data) %in% c("asset_chair"), with=FALSE]
fit <- glm(as.matrix(Y)~as.matrix(W))
summary(fit)
data[[A]]
data["A"
]
data[[node_list$A]]
node_list <- list(
W = c(
"momheight", "aged", "momage", "Nlt18", "Ncomp", "watmin",
"elec", "floor", "walls", "roof", "asset_wardrobe",
"asset_table", "asset_chair", "asset_khat",
"asset_chouki", "asset_refrig", "asset_bike",
"asset_moto", "asset_sewmach", "asset_mobile"
),
A = "asset_tv", # pretested insignificant variable to the outcome
Y = "whz"
)
data[[node_list$A]]
data[[node_list$A]] == 0
data[data[[node_list$A]] == 0,]
### 1. naive ###
W <- data[ ,colnames(data) %in% node_list$W, with=FALSE]
Y <- data[ ,colnames(data) %in% node_list$Y, with=FALSE]
W1 <- W[data[[node_list$A]] == 1, ]
Y1 <- Y[data[[node_list$A]] == 1, ]
W0 <- W[data[[node_list$A]] == 0, ]
Y0 <- Y[data[[node_list$A]] == 0, ]
fit <- glm(as.matrix(Y1)~as.matrix(W1))
a <- predict(fit, newdata = W0, type = 'response', se.fit = TRUE)
a
W1
?poly
### 1. naive ###
W <- data[ ,colnames(data) %in% node_list$W, with=FALSE]
Y <- data[ ,colnames(data) %in% node_list$Y, with=FALSE]
W1 <- W[data[[node_list$A]] == 1, ]
Y1 <- Y[data[[node_list$A]] == 1, ]
W0 <- W[data[[node_list$A]] == 0, ]
Y0 <- Y[data[[node_list$A]] == 0, ]
fit <- glm(node_list$Y ~ node_list$W, data = cbind(W1, Y1))
node_list$W
a <- glm.fit(as.matrix(W1), as.matrix(Y1))
summary(a)
predict(fit, newdata = W0, type = 'response')
paste(node_list$W, sep ="+")
node_list$W
paste(node_list$W)
paste0(node_list$W)
paste(node_list$W, collapse = "+")
paste0(node_list$W, collapse = "+")
paste(node_list$W, collapse = " + ")
node_list$Y + " ~ " + paste(node_list$W, collapse = " + ")
paste(node_list$Y, "~", paste(node_list$W, collapse = " + "))
### 1. naive ###
W <- data[ ,colnames(data) %in% node_list$W, with=FALSE]
Y <- data[ ,colnames(data) %in% node_list$Y, with=FALSE]
W1 <- W[data[[node_list$A]] == 1, ]
Y1 <- Y[data[[node_list$A]] == 1, ]
W0 <- W[data[[node_list$A]] == 0, ]
Y0 <- Y[data[[node_list$A]] == 0, ]
fit <- glm(paste(node_list$Y, "~", paste(node_list$W, collapse = " + ")),
data = cbind(W1, Y1))
est <- predict(fit, newdata = W0, type = 'response')
